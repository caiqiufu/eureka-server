server:
  port: 8761
  address: 127.0.0.1
  #servlet: 
  #   context-path: /eureka-server
#  eureka server 启动时会创建一个定时任务，每隔一段时间(默认60s)将当前清单中超时(默认90s)没有续约的服务剔除出去
#  自我保护 ：
#  在信息面板中可能会出现这样的红色警告 EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY'RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.
#  该警告就是触发了eureka的自我保护机制，服务注册到eureka server后会维护一个心跳连接.eureka server在运行期间，会统计心跳失败的比例在15分钟内是否低于85%.
#  如果低于,会将当前的实例注册信息保护起来,让这些实例不会过期.可以配置 eureka.server.enable-self-preservation=false 来关闭保护机制
#  关闭保护机制，信息面板中会显示 THE SELF PRESERVATION MODE IS TURNED OFF.THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK/OTHER PROBLEMS.
eureka:
  instance:
    prefer-ip-address: true
    hostname: 127.0.0.1
  server: 
    enable-self-preservation: false	# 设为false，关闭自我保护
    eviction-interval-timer-in-ms: 5
  client:
    #  在默认设置下，该服务注册中心也会将自己作为客户端来尝试注册它自己，所以我们需要禁用它的客户端注册行为
    #  配置register-with-eureka: false 和 fetch-registry: false 来表明自己是一个eureka server
    #registerWithEureka: false
    #fetchRegistry: false
    register-with-eureka: false
    fetch-registry: false
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
security:
    basic:
      enabled: true  # 开启基于HTTP basic的认证
    user:
      name:admin
      password:unieap
# 共有8个级别，按照从低到高为：ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF。
logging:
   file: logs/eureka-server/application-error.log
   pattern:
     console: "%d %-5level %logger : %msg%n"
     file: "%d %-5level [%thread] %logger : %msg%n"
   level:
      org.springframework: ERROR
      org.springframework.web: ERROR
      com.howtodoinjava: ERROR
      org.hibernate: ERROR
      com.netflix.eureka: ERROR
#通过HTTP发送shutdown信号
endpoints : 
      #启用shutdown   
      shutdown : 
         enabled : true
         #禁用密码验证
         sensitive : false